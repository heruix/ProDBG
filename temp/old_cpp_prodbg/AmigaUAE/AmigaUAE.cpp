#include "AmigaUAE.h"
#include "Backend/IdService.h"
#include <QDebug>
#include <QFileDialog>
#include <QMessageBox>
#include <QProcess>
#include <QSettings>
#include <QString>
#include <QTemporaryDir>
#include <QTextStream>

namespace prodbg {

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

AmigaUAE::AmigaUAE(QObject* parent)
    : QObject(parent)
    , m_uaeProcess(nullptr)
    , m_copyFiles(true)
{
    m_setFileId = IdService_register("AmigaUAE_SetFile");
    m_setHddPathId = IdService_register("AmigaUAE_SetHddPath");

    m_uaeProcess = new QProcess();
    m_uaeProcess->setProcessChannelMode(QProcess::ForwardedChannels);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

AmigaUAE::~AmigaUAE()
{
    delete m_tempDir;
    killProcess();
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

bool AmigaUAE::openFile()
{
    readSettings();

    QString path = QFileDialog::getOpenFileName(nullptr, 
            QStringLiteral("Select Amiga executable to debug"), 
            m_amigaExePath);

    if (path.isEmpty()) {
        return false;
    }

    m_localExeToRun = path;

    QFileInfo info(path);
    m_amigaExePath = info.path();

    writeSettings();

    return true;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void AmigaUAE::killProcess()
{
    if (!m_skipUAELaunch) {
        m_uaeProcess->kill();
    }
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void AmigaUAE::runExecutable(const QString& filename)
{
    if (!validateSettings()) {
        return;
    }

    if (!m_skipUAELaunch) {
        launchUAE();
    }

    QFileInfo info(filename);

    m_amigaExePath = info.path();
    writeSettings();
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static QString generateUAEConfig(const QString& destPath, const QString& romPath, AmigaUAEConfig::ConfigMode mode)
{
    QString fileDest = QString();

    if (mode == AmigaUAEConfig::ConfigMode_Auto_Fastest_WinUAE) {
        fileDest = QDir::cleanPath(destPath + QDir::separator() + QStringLiteral("win_uae_cfg.uae"));
    } else {
        fileDest = QDir::cleanPath(destPath + QDir::separator() + QStringLiteral("uae_config.fs-uae"));
    }

    QFile file(fileDest);
    if (!file.open(QIODevice::WriteOnly | QIODevice::Text)) {
        QMessageBox::critical(nullptr, QStringLiteral("Unable to write config to temp directory"), fileDest);
        return QString();
    }

    switch (mode) {
        case AmigaUAEConfig::ConfigMode_Auto_Fastest_FsUAE: {
            QTextStream out(&file);
            out << "# FS-UAE Config autogenerated by ProDBG\n";
            out << "[fs-uae]\n";
            out << "amiga_model = A1200\n";
            out << "hard_drive_0 = " << destPath << "\n";
            out << "chip_memory = 1024\n";
            if (!romPath.isEmpty()) {
                out << "kickstart_file = " << romPath << "\n";
            }
            out << "slow_memory = 1792\n";
            break;
        }

        case AmigaUAEConfig::ConfigMode_Auto_Fastest_WinUAE: {
            QTextStream out(&file);
            out << "use_remote_debugger=true\n";
            out << "chipmem_size=4\n";
            out << "cpu_speed=real\n";
            out << "cpu_throttle=0.0\n";
            out << "cpu_type=68ec020\n";
            out << "cpu_model=68020\n";
            out << "z3mem_size=0\n";
            out << "z3mem_start=0x40000000\n";
            out << "filesystem2=rw,dh0:dummy_hdd:" << destPath << ",0\n";
            out << "uaehf0=dir,rw,dh0:dummy_hdd:" << destPath << ",0\n";
            if (!romPath.isEmpty()) {
                out << "kickstart_rom_file=" << romPath << "\n";
            }

            break;
        }
        default: {
            QMessageBox::critical(nullptr, QStringLiteral("Unsupported target type"), QStringLiteral(":("));
            return QString();
        }
    }

    return fileDest;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static bool copyExecutable(const QString& destPath, const QString& sourceFile)
{
    QFileInfo fileInfo(sourceFile);
    QString filename = fileInfo.fileName();
    QString fileDest = QDir::cleanPath(destPath + QDir::separator() + filename);

    if (QFile::exists(fileDest)) {
        QFile::remove(fileDest);
    }

    if (!QFile::copy(sourceFile, fileDest)) {
        QString error = QStringLiteral("Failed to copy file ");
        error += sourceFile;
        error += QStringLiteral(" to ");
        error += fileDest;
        error += QStringLiteral(" . Make sure file is readable/directory is writeable/etc ");

        QMessageBox::critical(nullptr, QStringLiteral("Failed to copy file"), error);

        return false;
    }

    return true;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

bool AmigaUAE::validateSettings()
{
    readSettings();

    if (m_uaeExe.isEmpty()) {
        QMessageBox::critical(nullptr, QStringLiteral("No UAE executable selected"),
                              QStringLiteral("In order to run Amiga executables you need to select the emulator "
                                             "executable in \"Config -> Amiga UAE..\""));
        return false;
    }

    QFileInfo fileInfo(m_localExeToRun);
    QString filename = fileInfo.fileName();

    m_fileToRun = QStringLiteral("dh0:") + filename;

    if (m_configMode == AmigaUAEConfig::ConfigMode_Manual) {
        if (m_config.isEmpty()) {
            QMessageBox::critical(nullptr, QStringLiteral("No UAE config selected"),
                                  QStringLiteral("In order to run Amiga executables you need to select a configuration "
                                                 "file for UAE in \"Config -> Amiga UAE..\""));
            return false;
        }

        if (m_dh0Path.isEmpty()) {
            QMessageBox::critical(
                nullptr, QStringLiteral("No hard drive path selected"),
                QStringLiteral("In order to run Amiga executables you need to select the directory use "
                               "for the hard drive in \"Config -> Amiga UAE..\""));
            return false;
        }

        // If we aren't going to copy file we have to make sure the path to the file is located in the output
        // hdd directory

        if (!m_copyFiles) {
            if (m_localExeToRun.indexOf(m_dh0Path) != 0) {
                QMessageBox::critical(
                    nullptr, QStringLiteral("Executable not peresent in path"),
                    QStringLiteral(
                        "The executable you are trying to run isn't present in the HDD path."
                        "Either select correct path or the 'Copy files' option in \"Config -> Amiga UAE..\""));
                return false;
            }
        } else {
            return copyExecutable(m_dh0Path, m_localExeToRun);
        }
    } else {
        m_tempDir = new QTemporaryDir();
        m_dh0Path = m_tempDir->path();

        m_config = generateUAEConfig(m_tempDir->path(), m_romPath, m_configMode);
        bool copyRes = copyExecutable(m_dh0Path, m_localExeToRun);

        if (m_config.isEmpty() || !copyRes) {
            delete m_tempDir;
            m_tempDir = nullptr;
            return false;
        }
    }

    return true;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void AmigaUAE::launchUAE()
{
    QStringList args;

    m_running = false;

    connect(m_uaeProcess, &QProcess::started, this, &AmigaUAE::started);
    connect(m_uaeProcess, &QProcess::errorOccurred, this, &AmigaUAE::errorOccurred);
    connect(m_uaeProcess, &QProcess::readyReadStandardOutput, this, &AmigaUAE::printOutput);

    printf("launchUae\n");

    qDebug() << "config " << m_config;

    args << m_config;

    if (m_config.indexOf(QStringLiteral("fs-uae")) > 0) {
        args << QStringLiteral("--remote-debugger=1");
    }

    args << m_cmdLineArgs.split(QLatin1Char(' '));

    m_uaeProcess->start(m_uaeExe, args);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void AmigaUAE::printOutput()
{
    printf("printOutput\n");

    qDebug() << "UAE output " << m_uaeProcess->readAllStandardOutput();
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void AmigaUAE::started()
{
    m_running = true;
    printf("started uae ok!\n");
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void AmigaUAE::errorOccurred(QProcess::ProcessError error)
{
    (void)error;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void AmigaUAE::writeSettings()
{
    QSettings settings(QStringLiteral("TBL"), QStringLiteral("ProDBG"));
    settings.beginGroup(QStringLiteral("AmigaUAEExePath"));
    settings.setValue(QStringLiteral("amigaExePath"), m_amigaExePath);
    settings.endGroup();
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void AmigaUAE::readSettings()
{
    QSettings settings(QStringLiteral("TBL"), QStringLiteral("ProDBG"));

    settings.beginGroup(QStringLiteral("AmigaUAEConfig"));
    m_uaeExe = settings.value(QStringLiteral("executablePath")).toString();
    m_config = settings.value(QStringLiteral("configPath")).toString();
    m_cmdLineArgs = settings.value(QStringLiteral("cmdlineArgs")).toString();
    m_dh0Path = settings.value(QStringLiteral("dh0Path")).toString();
    m_romPath = settings.value(QStringLiteral("romPath")).toString();
    m_copyFiles = settings.value(QStringLiteral("copyFilesToHDD")).toBool();
    m_skipUAELaunch = settings.value(QStringLiteral("skipUAELaunch")).toBool();
    m_configMode = (AmigaUAEConfig::ConfigMode)settings.value(QStringLiteral("configMode")).toInt();
    settings.endGroup();

    settings.beginGroup(QStringLiteral("AmigaUAEExePath"));
    m_amigaExePath = settings.value(QStringLiteral("amigaExePath")).toString();

    settings.endGroup();
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}
